@{
    ViewBag.Title = "Home Page";
}

@model LifeCNC.ViewModels.cmSurveyList
<script src="@Url.Content("~/Scripts/knockout-2.2.1.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/knockout.mapping-latest.js")" type="text/javascript"></script>
<table data-bind="visible: viewModel.SurveyQuestions().length >0">
    <thead>
        <tr>
            <th>Question</th>
        </tr>
    </thead>
    <tbody data-bind='foreach: SurveyQuestions'>
        <tr>
            <td><input  data-bind="value: Question, valueUpdate: 'afterkeydown' "/></td>
            <td><button data-bind="click: $root.saveQuestion, enable: Question() != originalValue()">Save</button></td>
            <td><button data-bind="click: $root.deleteQuestion">Delete</button></td>
            <td><button data-bind="click: $root.showAnswers">Show Answers</button></td>
       </tr>
              <!-- ko foreach: SurveyAnswers -->
             <tr data-bind="visible: $parent.showAnswers()"><td>Answer<input  data-bind="    value: Answer, valueUpdate: 'afterkeydown' " /><td></tr>
            <!-- /ko -->
       
        <tr><td><button data-bind="click: function(data, event) { $root.addAnswer($index(), Id()) }, visible: showAnswers()">Add Answer</button></td></tr>

    </tbody>
</table>
<button data-bind="click: viewModel.addQuestion">Add Question</button>

<script type="text/html" id="answer-template">
        <tr><td>Answer</td><td><input  data-bind="value: Answer, valueUpdate: 'afterkeydown' " /><td></tr>
</script>
<script type="text/javascript">
    var self=this;
    
    var data= @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    self.MakeQuestion=function()
    {
        var newQuestion={ Id:0, Question:"", originalValue:"", showAnswers:false};
        var questionMade=ko.mapping.fromJS(newQuestion)
        questionMade.SurveyAnswers=ko.observableArray();
        return questionMade;
    }
    self.MakeQuestion1=function(question)
    {
        var newQuestion={ Id:question.Id, Question:question.Question, originalValue:question.Question, showAnswers:false};
        var questionMade=ko.mapping.fromJS(newQuestion)
        
        questionMade.SurveyAnswers=ko.observableArray(question.SurveyAnswers);
        
        return questionMade;
    }
    var mapping = {
        'SurveyQuestions': {
            create: function (options) {
                var result = self.MakeQuestion1(options.data);
                return result;
            }
        }
    };
    
    self.MakeAnswer=function(questionId)
    {
        var newAnswer={ Id:0, Answer:"", originalValue:"", QuestionId:questionId};
        return ko.mapping.fromJS(newAnswer)
    }
    
    var viewModel= ko.mapping.fromJS(data, mapping);
    
    viewModel.addQuestion= function(){
        var newQuestion=self.MakeQuestion();
        self.viewModel.SurveyQuestions.push(newQuestion);        
    };
    viewModel.addAnswer= function(index, questionId){
        var newAnswer=self.MakeAnswer(questionId);
        self.viewModel.SurveyQuestions()[index].SurveyAnswers().push(newAnswer);
        ko.mapping.fromJS(self.viewModel);
    };
   
    viewModel.deleteQuestion= function(question){
        self.viewModel.SurveyQuestions.remove(question);
        if (question.Id!=0) {
            question.Question(question.originalValue);
            var data = {data: ko.toJSON(question)};
            $.getJSON("/Home/DeleteQuestion", data, function(returnedData) {
            });
        }
    };
    viewModel.showAnswers= function(question){
        var index=self.viewModel.SurveyQuestions.indexOf(question);
        var questionLine=self.viewModel.SurveyQuestions.peek()[index];
        questionLine.showAnswers(questionLine.showAnswers()==false);
           
    };
    
    viewModel.saveQuestion= function(question){
        var me=this;
        var data = {data: ko.toJSON(question)};
        $.getJSON("/Home/SaveQuestion", data, function(returnedData) {
            if (question.Id()==0){
                self.viewModel.SurveyQuestions.pop();
                var toAdd=self.MakeQuestion1(question);
                self.viewModel.SurveyQuestions.push(toAdd);  
            }
            else
            {
                var index=self.viewModel.SurveyQuestions.indexOf(question);
                self.viewModel.SurveyQuestions()[index].originalValue(question.Question());
            }
           
        });
    }
   
     ko.applyBindings(viewModel);

</script>
